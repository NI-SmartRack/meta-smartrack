From cd6eb15bfabd6b94191c70f0e02d5e403d3ff679 Mon Sep 17 00:00:00 2001
From: wkoe <wilson.koe@ni.com>
Date: Wed, 22 Dec 2021 23:17:08 -0800
Subject: [PATCH] hwmon: add support for SMSC EMC2303

Signed-off-by: wkoe <wilson.koe@ni.com>
---
 .../devicetree/bindings/hwmon/emc2303.txt          |  30 +
 drivers/hwmon/Kconfig                              |  10 +
 drivers/hwmon/Makefile                             |   1 +
 drivers/hwmon/emc2303.c                            | 711 +++++++++++++++++++++
 4 files changed, 752 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/hwmon/emc2303.txt
 create mode 100644 drivers/hwmon/emc2303.c

diff --git a/Documentation/devicetree/bindings/hwmon/emc2303.txt b/Documentation/devicetree/bindings/hwmon/emc2303.txt
new file mode 100644
index 00000000..7fcd9f9
--- /dev/null
+++ b/Documentation/devicetree/bindings/hwmon/emc2303.txt
@@ -0,0 +1,30 @@
+EMC2303 (I2C)
+
+This device is a RPM-based PWM Fan Speed Controller for 3 fans.
+Each fan can be configured individually:
+
+- The PWM mode:
+   0: PWM is disabled
+   3: RPM based PWM
+
+- The target RPM speed (for RPM based PWM mode)
+  max 16000 (according to data sheet)
+
+
+- The /emc2303 node
+
+  Required properties:
+
+  - compatible : must be "smsc,emc2303"
+  - reg : I2C bus address of the device
+  - #address-cells : must be <1>
+  - #size-cells : must be <0>
+
+  Example EMC2303 node:
+
+    emc2303@2C {
+        compatible = "smsc,emc2303";
+        reg = <0x2C>;
+        #address-cells = <1>;
+        #size-cells = <0>;
+    }
diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index 2fa4666..1b705a1 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -1457,6 +1457,16 @@ config SENSORS_EMC2103
 	  This driver can also be built as a module. If so, the module
 	  will be called emc2103.
 
+config SENSORS_EMC2303
+	tristate "SMSC EMC2303"
+	depends on I2C
+	help
+	  If you say yes here you get support for the SMSC EMC2303
+	  fan controller chips.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called emc2303.
+
 config SENSORS_EMC6W201
 	tristate "SMSC EMC6W201"
 	depends on I2C
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index b033e67..611c9c8 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -60,6 +60,7 @@ obj-$(CONFIG_SENSORS_DS620)	+= ds620.o
 obj-$(CONFIG_SENSORS_DS1621)	+= ds1621.o
 obj-$(CONFIG_SENSORS_EMC1403)	+= emc1403.o
 obj-$(CONFIG_SENSORS_EMC2103)	+= emc2103.o
+obj-$(CONFIG_SENSORS_EMC2303)	+= emc2303.o
 obj-$(CONFIG_SENSORS_EMC6W201)	+= emc6w201.o
 obj-$(CONFIG_SENSORS_F71805F)	+= f71805f.o
 obj-$(CONFIG_SENSORS_F71882FG)	+= f71882fg.o
diff --git a/drivers/hwmon/emc2303.c b/drivers/hwmon/emc2303.c
new file mode 100644
index 00000000..b2ae311
--- /dev/null
+++ b/drivers/hwmon/emc2303.c
@@ -0,0 +1,711 @@
+/*
+ * emc2303.c - hwmon driver for SMSC EMC2303 fan controller
+ *
+ * Based on emc2103 driver by SMSC.
+ *
+ * Datasheet available at:
+ * https://ww1.microchip.com/downloads/en/DeviceDoc/EMC2301-2-3-5-Data-Sheet-DS20006532A.pdf
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/jiffies.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/of.h>
+
+/*
+ * Initial Register values for SmartRacks.
+ * Values provided by Mechanical Engineer. Refer to the following link:
+ * https://nio365.sharepoint.com/sites/SmartRack/Shared%20Documents/Forms/AllItems.aspx?id=%2Fsites%2FSmartRack%2FShared+Documents%2F3_Mechanical%2FThermal%2FV%26V%2F16U%2Ffan+control%2FVI%2FEMC+2303+boka+fan+config+file%2Ffan+setting+9GV+%283+fans%29+ver003.txt&parent=%2Fsites%2FSmartRack%2FShared+Documents%2F3_Mechanical%2FThermal%2FV%26V%2F16U%2Ffan+control%2FVI%2FEMC+2303+boka+fan+config+file&isSPOFile=1&OR=Teams-HL&CT=1640669588127&sourceId=&params=%7B%22AppName%22%3A%22Teams-Desktop%22%2C%22AppVersion%22%3A%2227%2F21110108719%22%7D
+ *
+ * Register description below are only based on SmartRacks specific configuration. For full
+ * description of each register's function, please refer to the datasheet.
+ */
+
+/* Configuration Register at 20H (Section 6.2)
+ * bit      Field        Value
+ * 7        MASK         0 = ALERT pin is unmasked.
+ * 6        DIS_TO       1 = The SMBus Time-Out function is disabled.
+ * 5        WD_EN        0 = Watchdog Timer does not operate continuously.
+ * 4:2      -            -
+ * 1        DRECK        1 = The CLK pin acts as a clock output and is a push-pull driver.
+ * 0        USECK        0 = Use internal oscillator for all tachometer measurements.
+ */
+#define REG_CONFIGURATION_VALUE   0x42
+
+/* Fan Configuration Registers at 32H, 42H and 52H (Section 6.14)
+ * bit      Field        Value
+ * 7        ENAGx          1 = Closed Loop algorithm is enabled.
+ * 6:5      RNGx[1:0]     10 = 2000 RPM minimum, TACH count multiplier = 4.
+ * 4:3      EDGx[1:0]     01 = 5 edges (2 poles), effective TACH multiplier is 1.
+ * 2:0      UDTx[2:0]    011 = 400 ms update interval.
+ */
+#define REG_FAN_CONFIGURATION_1_VALUE   0xcb
+
+/* Fan Configuration 2 Registers at 33H, 43H and 53H (Section 6.15)
+ * bit      Field        Value
+ * 7        -            -
+ * 6        ENRCx         0 = Ramp Rate Control disabled.
+ * 5        GHENx         1 = Glitch filter enabled.
+ * 4:3      DPTx[1:0]    01 = BASIC Derivative Option for Fan Speed Setting calculation.
+ * 2:1      ERGx[1:0]    01 = 50 RPM Error Window
+ * 0        -            -
+ */
+#define REG_FAN_CONFIGURATION_2_VALUE   0x2a
+
+/* PID Gain Register at 35H, 45H and 55H (Section 6.16)
+ * bit      Field        Value
+ * 7:6      -            -
+ * 5:4      GDEx[1:0]    01 = 2x Derivative Gain.
+ * 3:2      GINx[1:0]    01 = 2x Integral Gain.
+ * 1:0      GPRx[1:0]    01 = 2x Proportional Gain.
+ */
+#define REG_GAIN_VALUE   0x15
+
+/* Fan Spin Up Configuration Registers at 36H, 46H and 56H (Section 6.17)
+ * bit      Field        Value
+ * 7:6      DFCx[1:0]     00 = Drive Fail Count disabled.
+ * 5        NKCKx          1 = Spin-Up will not drive to 100% PWM.
+ * 4:2      SPLVx[2:0]   000 = 30% Spin-Up Level.
+ * 1:0      SPT[1:0]      11 = 2s Spin-Up Time.
+ */
+#define REG_FAN_SPIN_UP_CONFIG_VALUE   0x23
+
+/* Maximum Step Size Register at 37H, 47H and 57H (Section 6.18)
+ * bit      Field        Value
+ * 7:6      -            -
+ * 5:0      FxMS[5:0]    00 0101 = Fan Drive Max Step size is 5.
+ */
+#define REG_FAN_MAX_STEP_VALUE   0x05
+
+/* Fan Minimum Drive Register at 38H, 48H and 58H (Section 6.19)
+ * bit      Field        Value
+ * 7:0      FxMS[7:0]    0000 0001 = Fan Drive Min Step size is 1.
+ */
+#define REG_FAN_MINIMUM_DRIVE_VALUE   0x01
+
+/* Drive Fail Band Registers (Section 6.21):-
+ * High Byte at 3BH, 4BH and 5BH
+ * bit      Field        Value
+ * 7:0      FxDF[12:5]   0000 1000
+ *
+ * Low Byte at 3AH, 4AH and 5AH
+ * bit      Field        Value
+ * 7:3      FxDF[4:0]    0 0000
+ * 2:0      -            -
+ *
+ * Number of tach counts used by the Fan Drive Fail detection circuitry = 256 (in decimal).
+ */
+#define REG_FAN_DRIVE_FAIL_BAND_HIGH_VALUE   0x08
+#define REG_FAN_DRIVE_FAIL_BAND_LOW_VALUE   0x00
+
+/*
+ * Addresses scanned.
+ * Listed in the same order as they appear in the EMC2303 data sheets.
+ *
+ * Note: these are the I2C adresses which are possible for EMC2303 chip.
+ */
+static const unsigned short i2c_addresses[] = {
+	0x2E,
+	0x2F,
+	0x2C,
+	0x2D,
+	0x4C,
+	0x4D,
+	I2C_CLIENT_END
+};
+
+/*
+ * global registers
+ */
+enum {
+	REG_CONFIGURATION = 0x20,
+	REG_FAN_STATUS = 0x24,
+	REG_FAN_STALL_STATUS = 0x25,
+	REG_FAN_SPIN_STATUS = 0x26,
+	REG_DRIVE_FAIL_STATUS = 0x27,
+	REG_FAN_INTERRUPT_ENABLE = 0x29,
+	REG_PWM_POLARITY_CONFIG = 0x2a,
+	REG_PWM_OUTPUT_CONFIG = 0x2b,
+	REG_PWM_BASE_FREQ_1 = 0x2c,
+	REG_PWM_BASE_FREQ_2 = 0x2d,
+	REG_SOFTWARE_LOCK = 0xef,
+	REG_PRODUCT_FEATURES = 0xfc,
+	REG_PRODUCT_ID = 0xfd,
+	REG_MANUFACTURER_ID = 0xfe,
+	REG_REVISION = 0xff
+};
+
+/*
+ * fan specific registers
+ */
+enum {
+	REG_FAN_SETTING = 0x30,
+	REG_PWM_DIVIDE = 0x31,
+	REG_FAN_CONFIGURATION_1 = 0x32,
+	REG_FAN_CONFIGURATION_2 = 0x33,
+	REG_GAIN = 0x35,
+	REG_FAN_SPIN_UP_CONFIG = 0x36,
+	REG_FAN_MAX_STEP = 0x37,
+	REG_FAN_MINIMUM_DRIVE = 0x38,
+	REG_FAN_VALID_TACH_COUNT = 0x39,
+	REG_FAN_DRIVE_FAIL_BAND_LOW = 0x3a,
+	REG_FAN_DRIVE_FAIL_BAND_HIGH = 0x3b,
+	REG_TACH_TARGET_LOW = 0x3c,
+	REG_TACH_TARGET_HIGH = 0x3d,
+	REG_TACH_READ_HIGH = 0x3e,
+	REG_TACH_READ_LOW = 0x3f,
+};
+
+#define SEL_FAN(fan, reg) (reg + fan * 0x10)
+
+/*
+ * Below is the fan configuration used in SmartRacks:
+ *
+ * TACH edges         = 5
+ * No. of poles       = 2
+ * Multiplier         = 4
+ * Internal Clk freq. = 32 kHz
+ */
+#define FAN_TACH_EDGES 5
+#define FAN_POLES      2
+#define FAN_MULTIPLIER 4
+#define FAN_CLK_FREQ   32000
+
+/* Apply Equation 4-2 from datasheet */
+#define FAN_RPM_FACTOR (((FAN_TACH_EDGES - 1) * FAN_MULTIPLIER * FAN_CLK_FREQ * 60) / FAN_POLES)
+
+struct emc2303_fan_data {
+	bool			rpm_control;
+	bool			valid;		/* registers are valid */
+	u16				tach;
+	u16				target;
+	unsigned long	last_updated;	/* in jiffies */
+};
+
+struct emc2303_data {
+	struct i2c_client	*client;
+	const struct		attribute_group *groups[4];
+	struct mutex		update_lock;
+	struct emc2303_fan_data fan[3];
+};
+
+static int read_u8_from_i2c(struct i2c_client *client, u8 i2c_reg, u8 *output)
+{
+	int status = i2c_smbus_read_byte_data(client, i2c_reg);
+	if (status < 0) {
+		dev_warn(&client->dev, "reg 0x%02x, err %d\n",
+			i2c_reg, status);
+	} else {
+		*output = status;
+	}
+	return status;
+}
+
+static int read_fan_from_i2c(struct i2c_client *client, u16 *output,
+			      u8 hi_addr, u8 lo_addr)
+{
+	int status = 0;
+	u8 high_byte, lo_byte;
+
+	status = read_u8_from_i2c(client, hi_addr, &high_byte);
+	if (status < 0)
+		return status;
+
+	status = read_u8_from_i2c(client, lo_addr, &lo_byte);
+	if (status < 0)
+		return status;
+
+	*output = ((u16)high_byte << 5) | (lo_byte >> 3);
+
+	return status;
+}
+
+static int write_fan_target_to_i2c(struct i2c_client *client, int fan,
+				    u16 new_target)
+{
+	const u8 lo_reg = SEL_FAN(fan, REG_TACH_TARGET_LOW);
+	const u8 hi_reg = SEL_FAN(fan, REG_TACH_TARGET_HIGH);
+	u8 high_byte = (new_target & 0x1fe0) >> 5;
+	u8 low_byte = (new_target & 0x001f) << 3;
+	int status = 0;
+
+	status = i2c_smbus_write_byte_data(client, lo_reg, low_byte);
+	if (status < 0)
+		return status;
+
+	status = i2c_smbus_write_byte_data(client, hi_reg, high_byte);
+
+	return status;
+}
+
+static int update_fan_config(struct i2c_client *client, int fan_idx)
+{
+	struct emc2303_data *data = i2c_get_clientdata(client);
+	u8 conf1;
+	int status = 0;
+
+	status = read_u8_from_i2c(client, SEL_FAN(fan_idx, REG_FAN_CONFIGURATION_1),
+			     &conf1);
+	if (status < 0)
+		return status;
+
+	data->fan[fan_idx].rpm_control = (conf1 & 0x80) != 0;
+
+	return status;
+}
+
+static int update_tach_target_and_reading(struct i2c_client *client, int fan_idx)
+{
+	struct emc2303_data *data = i2c_get_clientdata(client);
+	int status = 0;
+
+	status = read_fan_from_i2c(client, &data->fan[fan_idx].target,
+			  SEL_FAN(fan_idx, REG_TACH_TARGET_HIGH),
+			  SEL_FAN(fan_idx, REG_TACH_TARGET_LOW));
+	if (status < 0)
+		return status;
+
+	status = read_fan_from_i2c(client, &data->fan[fan_idx].tach,
+			  SEL_FAN(fan_idx, REG_TACH_READ_HIGH),
+			  SEL_FAN(fan_idx, REG_TACH_READ_LOW));
+
+	return status;
+}
+
+static int emc2303_update_fan_data(struct i2c_client *client, int fan_idx)
+{
+	struct emc2303_data *data = i2c_get_clientdata(client);
+	struct emc2303_fan_data *fan_data = &data->fan[fan_idx];
+	int status = 0;
+
+	mutex_lock(&data->update_lock);
+
+	if (time_after(jiffies, fan_data->last_updated + HZ + HZ / 2)
+	    || !fan_data->valid) {
+		status = update_fan_config(client, fan_idx);
+		if (status < 0)
+			goto exit_unlock;
+
+		status = update_tach_target_and_reading(client, fan_idx);
+		if (status < 0)
+			goto exit_unlock;
+
+		fan_data->valid = true;
+		fan_data->last_updated = jiffies;
+	}
+
+exit_unlock:
+	mutex_unlock(&data->update_lock);
+	return status;
+}
+
+/*
+ * set config functions
+ */
+static int
+emc2303_set_fan_target(struct i2c_client *client, int fan_idx, long rpm_target)
+{
+	struct emc2303_data *data = i2c_get_clientdata(client);
+	struct emc2303_fan_data *fan = &data->fan[fan_idx];
+	int status = 0;
+
+	status = emc2303_update_fan_data(client, fan_idx);
+	if (status < 0)
+		return status;
+
+	/*
+	 * Datasheet states 16000 as maximum RPM target
+	 * (table 1.2 and section 4.3)
+	 */
+	if ((rpm_target < 0) || (rpm_target > 16000))
+		return -EINVAL;
+
+	mutex_lock(&data->update_lock);
+
+	if (rpm_target == 0)
+		fan->target = 0x1fff;
+	else
+		fan->target = clamp_val(
+			FAN_RPM_FACTOR / rpm_target,
+			0, 0x1fff);
+
+	status = write_fan_target_to_i2c(client, fan_idx, fan->target);
+
+	/* invalidate fan data to force re-read from hardware */
+	fan->valid = false;
+
+	mutex_unlock(&data->update_lock);
+	return status;
+}
+
+static int
+emc2303_set_pwm_enable(struct i2c_client *client, int fan_idx, long enable)
+{
+	struct emc2303_data *data = i2c_get_clientdata(client);
+	struct emc2303_fan_data *fan = &data->fan[fan_idx];
+	const u8 reg_fan_conf1 = SEL_FAN(fan_idx, REG_FAN_CONFIGURATION_1);
+	int status = 0;
+	u8 conf_reg;
+
+	status = emc2303_update_fan_data(client, fan_idx);
+	if (status < 0)
+		return status;
+
+	mutex_lock(&data->update_lock);
+	switch (enable) {
+	case 0:
+		fan->rpm_control = false;
+		break;
+	case 3:
+		fan->rpm_control = true;
+		break;
+	default:
+		status = -EINVAL;
+		goto exit_unlock;
+	}
+
+	status = read_u8_from_i2c(client, reg_fan_conf1, &conf_reg);
+	if (status < 0)
+		goto exit_unlock;
+
+	if (fan->rpm_control)
+		conf_reg |= 0x80;
+	else
+		conf_reg &= ~0x80;
+
+	status = i2c_smbus_write_byte_data(client, reg_fan_conf1, conf_reg);
+
+	/* invalidate fan data to force re-read from hardware */
+	fan->valid = false;
+
+exit_unlock:
+	mutex_unlock(&data->update_lock);
+	return status;
+}
+
+static ssize_t
+fan_input_show(struct device *dev, struct device_attribute *da, char *buf)
+{
+	struct emc2303_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int fan_idx = to_sensor_dev_attr(da)->index;
+	struct emc2303_fan_data *fan = &data->fan[fan_idx];
+	int rpm = 0;
+	int status = 0;
+
+	status = emc2303_update_fan_data(client, fan_idx);
+	if (status < 0)
+		return status;
+
+	if (fan->tach != 0)
+		rpm = FAN_RPM_FACTOR / fan->tach;
+	return sprintf(buf, "%d\n", rpm);
+}
+
+static ssize_t
+fan_target_show(struct device *dev, struct device_attribute *da, char *buf)
+{
+	struct emc2303_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int fan_idx = to_sensor_dev_attr(da)->index;
+	struct emc2303_fan_data *fan = &data->fan[fan_idx];
+	int rpm = 0;
+	int status = 0;
+
+	status = emc2303_update_fan_data(client, fan_idx);
+	if (status < 0)
+		return status;
+
+	/* high byte of 0xff indicates disabled so return 0 */
+	if ((fan->target != 0) && ((fan->target & 0x1fe0) != 0x1fe0))
+		rpm = FAN_RPM_FACTOR / fan->target;
+
+	return sprintf(buf, "%d\n", rpm);
+}
+
+static ssize_t fan_target_store(struct device *dev, struct device_attribute *da,
+			      const char *buf, size_t count)
+{
+	struct emc2303_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int fan_idx = to_sensor_dev_attr(da)->index;
+	long rpm_target;
+	int status;
+
+	status = kstrtol(buf, 10, &rpm_target);
+	if (status < 0)
+		return status;
+
+	status = emc2303_set_fan_target(client, fan_idx, rpm_target);
+	if (status < 0)
+		return status;
+
+	return count;
+}
+
+static ssize_t
+pwm_enable_show(struct device *dev, struct device_attribute *da, char *buf)
+{
+	struct emc2303_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int fan_idx = to_sensor_dev_attr(da)->index;
+	struct emc2303_fan_data *fan = &data->fan[fan_idx];
+	int status = 0;
+
+	status = emc2303_update_fan_data(client, fan_idx);
+	if (status < 0)
+		return status;
+
+	return sprintf(buf, "%d\n", fan->rpm_control ? 3 : 0);
+}
+
+static ssize_t pwm_enable_store(struct device *dev, struct device_attribute *da,
+			      const char *buf, size_t count)
+{
+	struct emc2303_data *data = dev_get_drvdata(dev);
+	struct i2c_client *client = data->client;
+	int fan_idx = to_sensor_dev_attr(da)->index;
+	long new_value;
+	int status;
+
+	status = kstrtol(buf, 10, &new_value);
+	if (status < 0)
+		return status;
+
+	status = emc2303_set_pwm_enable(client, fan_idx, new_value);
+	if (status < 0)
+		return status;
+
+	return count;
+}
+
+static int set_init_config(struct i2c_client *client)
+{
+	int status = 0;
+	int idx;
+
+	/* Set global register first. */
+	status = i2c_smbus_write_byte_data(client, REG_CONFIGURATION,
+				REG_CONFIGURATION_VALUE);
+	if (status < 0)
+		return status;
+
+	/* Iterate through all 3 fans to set the fan registers. */
+	for (idx = 0; idx < 3; idx++)
+	{
+		/* Set Fan Configuration Registers. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_FAN_CONFIGURATION_1),
+					REG_FAN_CONFIGURATION_1_VALUE);
+		if (status < 0)
+			return status;
+
+		/* Set Fan Configuration 2 Registers. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_FAN_CONFIGURATION_2),
+					REG_FAN_CONFIGURATION_2_VALUE);
+		if (status < 0)
+			return status;
+
+		/* Set PID Gain Register. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_GAIN),
+					REG_GAIN_VALUE);
+		if (status < 0)
+			return status;
+
+		/* Set Fan Spin Up Configuration Registers. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_FAN_SPIN_UP_CONFIG),
+					REG_FAN_SPIN_UP_CONFIG_VALUE);
+		if (status < 0)
+			return status;
+
+		/* Set Maximum Step Size Register. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_FAN_MAX_STEP),
+					REG_FAN_MAX_STEP_VALUE);
+		if (status < 0)
+			return status;
+
+		/* Set Fan Minimum Drive Register. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_FAN_MINIMUM_DRIVE),
+					REG_FAN_MINIMUM_DRIVE_VALUE);
+		if (status < 0)
+			return status;
+
+		/* Set Drive Fail Band Low Byte Registers. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_FAN_DRIVE_FAIL_BAND_LOW),
+					REG_FAN_DRIVE_FAIL_BAND_LOW_VALUE);
+		if (status < 0)
+			return status;
+
+		/* Set Drive Fail Band High Byte Registers. */
+		status = i2c_smbus_write_byte_data(client,
+					SEL_FAN(idx, REG_FAN_DRIVE_FAIL_BAND_HIGH),
+					REG_FAN_DRIVE_FAIL_BAND_HIGH_VALUE);
+		if (status < 0)
+			return status;
+	}
+
+	return status;
+}
+
+static SENSOR_DEVICE_ATTR_RO(fan1_input, fan_input, 0);
+static SENSOR_DEVICE_ATTR_RW(fan1_target, fan_target, 0);
+static SENSOR_DEVICE_ATTR_RO(fan2_input, fan_input, 1);
+static SENSOR_DEVICE_ATTR_RW(fan2_target, fan_target, 1);
+static SENSOR_DEVICE_ATTR_RO(fan3_input, fan_input, 2);
+static SENSOR_DEVICE_ATTR_RW(fan3_target, fan_target, 2);
+static SENSOR_DEVICE_ATTR_RW(pwm1_enable, pwm_enable, 0);
+static SENSOR_DEVICE_ATTR_RW(pwm2_enable, pwm_enable, 1);
+static SENSOR_DEVICE_ATTR_RW(pwm3_enable, pwm_enable, 2);
+
+static struct attribute *emc2303_attributes_fan1[] = {
+	&sensor_dev_attr_fan1_input.dev_attr.attr,
+	&sensor_dev_attr_fan1_target.dev_attr.attr,
+	&sensor_dev_attr_pwm1_enable.dev_attr.attr,
+	NULL
+};
+
+static struct attribute *emc2303_attributes_fan2[] = {
+	&sensor_dev_attr_fan2_input.dev_attr.attr,
+	&sensor_dev_attr_fan2_target.dev_attr.attr,
+	&sensor_dev_attr_pwm2_enable.dev_attr.attr,
+	NULL
+};
+
+static struct attribute *emc2303_attributes_fan3[] = {
+	&sensor_dev_attr_fan3_input.dev_attr.attr,
+	&sensor_dev_attr_fan3_target.dev_attr.attr,
+	&sensor_dev_attr_pwm3_enable.dev_attr.attr,
+	NULL
+};
+
+static const struct attribute_group emc2303_fan1_group = {
+	.attrs = emc2303_attributes_fan1,
+};
+
+static const struct attribute_group emc2303_fan2_group = {
+	.attrs = emc2303_attributes_fan2,
+};
+
+static const struct attribute_group emc2303_fan3_group = {
+	.attrs = emc2303_attributes_fan3,
+};
+
+/*
+ * driver interface
+ */
+static int
+emc2303_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct emc2303_data *data;
+	struct device *hwmon_dev;
+	int status, idx = 0;
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA))
+		return -EIO;
+
+	data = devm_kzalloc(&client->dev, sizeof(struct emc2303_data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	i2c_set_clientdata(client, data);
+	data->client = client;
+	mutex_init(&data->update_lock);
+
+	status = i2c_smbus_read_byte_data(client, REG_PRODUCT_ID);
+
+	if (status == 0x35) /* EMC2303 */
+	{
+		/* sysfs hooks */
+		data->groups[idx++] = &emc2303_fan1_group;
+		data->groups[idx++] = &emc2303_fan2_group;
+		data->groups[idx++] = &emc2303_fan3_group;
+	}
+	else if (status < 0)
+	{
+		dev_err(&client->dev, "Failed to read reg REG_PRODUCT_ID, status = %d\n", status);
+		return status;
+	}
+	else
+	{
+		dev_err(&client->dev, "Unknown device, REG_PRODUCT_ID register content = 0x%x\n", status);
+		return -ENODEV;
+	}
+
+	status = set_init_config(client);
+	if (status < 0)
+	{
+		dev_err(&client->dev, "Failure when setting initial configuration, status: %d\n", status);
+		return status;
+	}
+
+	hwmon_dev = devm_hwmon_device_register_with_groups(&client->dev,
+							   client->name, data,
+							   data->groups);
+	if (IS_ERR(hwmon_dev))
+		return PTR_ERR(hwmon_dev);
+
+	dev_info(&client->dev, "pwm fan controller: '%s'\n",
+		 client->name);
+
+	return 0;
+}
+
+static const struct i2c_device_id emc2303_ids[] = {
+	{ "emc2303", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, emc2303_ids);
+
+/* Return 0 if detection is successful, -ENODEV otherwise */
+static int
+emc2303_detect(struct i2c_client *new_client, struct i2c_board_info *info)
+{
+	struct i2c_adapter *adapter = new_client->adapter;
+	int manufacturer, product;
+
+	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA))
+		return -ENODEV;
+
+	manufacturer =
+		i2c_smbus_read_byte_data(new_client, REG_MANUFACTURER_ID);
+	if (manufacturer != 0x5D)
+		return -ENODEV;
+
+	product = i2c_smbus_read_byte_data(new_client, REG_PRODUCT_ID);
+
+	if (product == 0x35)
+		strlcpy(info->type, "emc2303", I2C_NAME_SIZE);
+	else
+		return -ENODEV;
+
+	return 0;
+}
+
+static struct i2c_driver emc2303_driver = {
+	.class		= I2C_CLASS_HWMON,
+	.driver = {
+		.name	= "emc2303",
+	},
+	.probe		= emc2303_probe,
+	.id_table	= emc2303_ids,
+	.detect		= emc2303_detect,
+	.address_list	= i2c_addresses,
+};
+
+module_i2c_driver(emc2303_driver);
+
+MODULE_DESCRIPTION("SMSC EMC2303 hwmon driver");
+MODULE_LICENSE("GPL");
-- 
2.7.4

