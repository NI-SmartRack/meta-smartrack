From 3a72cb5c1167ded4c6823b99441e7980199cd455 Mon Sep 17 00:00:00 2001
From: wkoe <wilson.koe@ni.com>
Date: Sun, 20 Feb 2022 21:39:48 -0800
Subject: [PATCH] add support for diodes pi4ioe5v96248

Signed-off-by: wkoe <wilson.koe@ni.com>
---
 drivers/gpio/gpio-pcf857x.c | 109 ++++++++++++++++++++++++++++--------
 1 file changed, 85 insertions(+), 24 deletions(-)

diff --git a/drivers/gpio/gpio-pcf857x.c b/drivers/gpio/gpio-pcf857x.c
index abcc8c0136c4..90c160b93687 100644
--- a/drivers/gpio/gpio-pcf857x.c
+++ b/drivers/gpio/gpio-pcf857x.c
@@ -17,6 +17,7 @@
 #include <linux/of_device.h>
 #include <linux/slab.h>
 #include <linux/spinlock.h>
+#include <linux/bitops.h>
 
 
 static const struct i2c_device_id pcf857x_id[] = {
@@ -33,6 +34,7 @@ static const struct i2c_device_id pcf857x_id[] = {
 	{ "pca9675", 16 },
 	{ "max7328", 8 },
 	{ "max7329", 8 },
+	{ "pi4ioe5v96248", 48},
 	{ }
 };
 MODULE_DEVICE_TABLE(i2c, pcf857x_id);
@@ -52,6 +54,7 @@ static const struct of_device_id pcf857x_of_table[] = {
 	{ .compatible = "nxp,pca9675" },
 	{ .compatible = "maxim,max7328" },
 	{ .compatible = "maxim,max7329" },
+	{ .compatible = "diodes,pi4ioe5v96248" },
 	{ }
 };
 MODULE_DEVICE_TABLE(of, pcf857x_of_table);
@@ -74,9 +77,9 @@ struct pcf857x {
 	struct irq_chip		irqchip;
 	struct i2c_client	*client;
 	struct mutex		lock;		/* protect 'out' */
-	unsigned		out;		/* software latch */
-	unsigned		status;		/* current status */
-	unsigned		irq_enabled;	/* enabled irqs */
+	u64		out;			/* software latch */
+	u64		status;			/* current status */
+	u64		irq_enabled;	/* enabled irqs */
 
 	int (*write)(struct i2c_client *client, unsigned data);
 	int (*read)(struct i2c_client *client);
@@ -86,19 +89,28 @@ struct pcf857x {
 
 /* Talk to 8-bit I/O expander */
 
-static int i2c_write_le8(struct i2c_client *client, unsigned data)
+static int i2c_write_le8(struct i2c_client *client, u64 data)
 {
 	return i2c_smbus_write_byte(client, data);
 }
 
-static int i2c_read_le8(struct i2c_client *client)
+static int i2c_read_le8(struct i2c_client *client, u64 *data)
 {
-	return (int)i2c_smbus_read_byte(client);
+	u8 buf[1];
+	int status;
+	
+	status = i2c_master_recv(client, buf, 1);
+	
+	if(status < 0)
+		return status;
+	
+	*data = buf[0];
+	return status;
 }
 
 /* Talk to 16-bit I/O expander */
 
-static int i2c_write_le16(struct i2c_client *client, unsigned word)
+static int i2c_write_le16(struct i2c_client *client, u64 word)
 {
 	u8 buf[2] = { word & 0xff, word >> 8, };
 	int status;
@@ -107,7 +119,7 @@ static int i2c_write_le16(struct i2c_client *client, unsigned word)
 	return (status < 0) ? status : 0;
 }
 
-static int i2c_read_le16(struct i2c_client *client)
+static int i2c_read_le16(struct i2c_client *client, u64 *data)
 {
 	u8 buf[2];
 	int status;
@@ -115,7 +127,33 @@ static int i2c_read_le16(struct i2c_client *client)
 	status = i2c_master_recv(client, buf, 2);
 	if (status < 0)
 		return status;
-	return (buf[1] << 8) | buf[0];
+
+	*data = (buf[1] << 8) | buf[0];
+	return status;
+}
+
+/* Talk to 48-bit I/O expander */
+
+static int i2c_write_le48(struct i2c_client *client, u64 word)
+{
+	u8 buf[6] = { word & 0xff, (word >> 8) & 0xff, (word >> 16) & 0xff, (word >> 24) & 0xff, (word >> 32) & 0xff, (word >> 40) & 0xff, };
+	int status;
+
+	status = i2c_master_send(client, buf, 6);
+	return (status < 0) ? status : 0;
+}
+
+static int i2c_read_le48(struct i2c_client *client, u64 *data)
+{
+	u8 buf[6];
+	int status;
+
+	status = i2c_master_recv(client, buf, 6);
+	if (status < 0)
+	    return status;
+
+	*data = ((u64)buf[5] << 40) | ((u64)buf[4] << 32) | ((u64)buf[3] << 24) | ((u64)buf[2] << 16) | ((u64)buf[1] << 8) | (u64)buf[0];
+	return status;
 }
 
 /*-------------------------------------------------------------------------*/
@@ -126,7 +164,7 @@ static int pcf857x_input(struct gpio_chip *chip, unsigned offset)
 	int		status;
 
 	mutex_lock(&gpio->lock);
-	gpio->out |= (1 << offset);
+	gpio->out |= (1ULL << offset);
 	status = gpio->write(gpio->client, gpio->out);
 	mutex_unlock(&gpio->lock);
 
@@ -136,16 +174,17 @@ static int pcf857x_input(struct gpio_chip *chip, unsigned offset)
 static int pcf857x_get(struct gpio_chip *chip, unsigned offset)
 {
 	struct pcf857x	*gpio = gpiochip_get_data(chip);
-	int		value;
+	u64		value;
+	int		status;
 
-	value = gpio->read(gpio->client);
-	return (value < 0) ? value : !!(value & (1 << offset));
+	status = gpio->read(gpio->client, &value);
+	return (status < 0) ? status : !!(value & (1ULL << offset));
 }
 
 static int pcf857x_output(struct gpio_chip *chip, unsigned offset, int value)
 {
 	struct pcf857x	*gpio = gpiochip_get_data(chip);
-	unsigned	bit = 1 << offset;
+	u64 bit = 1ULL << offset;
 	int		status;
 
 	mutex_lock(&gpio->lock);
@@ -169,7 +208,9 @@ static void pcf857x_set(struct gpio_chip *chip, unsigned offset, int value)
 static irqreturn_t pcf857x_irq(int irq, void *data)
 {
 	struct pcf857x  *gpio = data;
-	unsigned long change, i, status;
+	u64 value;
+	unsigned long change; // unsigned long is 8 bytes wide on ARM64
+	int status, i;
 
 	status = gpio->read(gpio->client);
 
@@ -178,8 +219,8 @@ static irqreturn_t pcf857x_irq(int irq, void *data)
 	 * interrupt source, just to avoid bad irqs
 	 */
 	mutex_lock(&gpio->lock);
-	change = (gpio->status ^ status) & gpio->irq_enabled;
-	gpio->status = status;
+	change = (gpio->status ^ value) & gpio->irq_enabled;
+	gpio->status = value;
 	mutex_unlock(&gpio->lock);
 
 	for_each_set_bit(i, &change, gpio->chip.ngpio)
@@ -204,14 +245,14 @@ static void pcf857x_irq_enable(struct irq_data *data)
 {
 	struct pcf857x *gpio = irq_data_get_irq_chip_data(data);
 
-	gpio->irq_enabled |= (1 << data->hwirq);
+	gpio->irq_enabled |= (1ULL << data->hwirq);
 }
 
 static void pcf857x_irq_disable(struct irq_data *data)
 {
 	struct pcf857x *gpio = irq_data_get_irq_chip_data(data);
 
-	gpio->irq_enabled &= ~(1 << data->hwirq);
+	gpio->irq_enabled &= ~(1ULL << data->hwirq);
 }
 
 static void pcf857x_irq_bus_lock(struct irq_data *data)
@@ -236,11 +277,20 @@ static int pcf857x_probe(struct i2c_client *client,
 	struct pcf857x_platform_data	*pdata = dev_get_platdata(&client->dev);
 	struct device_node		*np = client->dev.of_node;
 	struct pcf857x			*gpio;
-	unsigned int			n_latch = 0;
+	u64				n_latch = 0;
+	u32				t_latch = 0;
 	int				status;
+	u64				value;
 
 	if (IS_ENABLED(CONFIG_OF) && np)
-		of_property_read_u32(np, "lines-initial-states", &n_latch);
+		// Read 64-bit value if expected lines-initial-states property is beyond 32-bit
+		if (id->driver_data == 48)
+			of_property_read_u64(np, "lines-initial-states", &n_latch);
+		// else read 32-bit value into temp latch and assign to n_latch
+		else {
+			of_property_read_u32(np, "lines-initial-states", &t_latch);
+			n_latch = t_latch;
+		}
 	else if (pdata)
 		n_latch = pdata->n_latch;
 	else
@@ -301,7 +351,17 @@ static int pcf857x_probe(struct i2c_client *client,
 
 		/* fail if there's no chip present */
 		else
-			status = i2c_read_le16(client);
+			status = i2c_read_le16(client, &value);
+		} else if (gpio->chip.ngpio == 48) {
+			gpio->write = i2c_write_le48;
+			gpio->read  = i2c_read_le48;
+
+			if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C))
+				status = -EIO;
+
+			/* fail if there's no chip present */
+			else
+				status = i2c_read_le48(client, &value);
 
 	} else {
 		dev_dbg(&client->dev, "unsupported number of gpios\n");
@@ -311,7 +371,8 @@ static int pcf857x_probe(struct i2c_client *client,
 	if (status < 0)
 		goto fail;
 
-	gpio->chip.label = client->name;
+	if(of_property_read_string(np, "label", &gpio->chip.label))
+		gpio->chip.label = client->name;
 
 	gpio->client = client;
 	i2c_set_clientdata(client, gpio);
@@ -332,7 +393,7 @@ static int pcf857x_probe(struct i2c_client *client,
 	 * reset state.  Otherwise it flags pins to be driven low.
 	 */
 	gpio->out = ~n_latch;
-	gpio->status = gpio->read(gpio->client);
+	gpio->status = gpio->read(gpio->client, &value);
 
 	status = devm_gpiochip_add_data(&client->dev, &gpio->chip, gpio);
 	if (status < 0)
-- 
2.17.1

